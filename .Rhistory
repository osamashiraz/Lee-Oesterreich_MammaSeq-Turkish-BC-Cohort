PMKBAll$combined = PMKBAll$Variants
combinedAlterations = data.frame(Sample.ID = rbind(cbind(as.character(mamma.final$Sample.ID)),
cbind(cnvCombined$Sample.ID)),
HUGO.symbol = rbind(cbind(as.character(mamma.final$HUGO.symbol)),
cbind(as.character(cnvCombined$gene))),
AF_CN = rbind(cbind(mamma.final$AF),
cbind(cnvCombined$copy.number)),
combined = rbind(cbind(mamma.final$combined), cbind(cnvCombined$alteration)),stringsAsFactors = F)
# OVERLAP BETWEEN FOUND ALTERATIONS AND PMKB DB
overlapPMKB = combinedAlterations[complete.cases(match(combinedAlterations$combined,PMKBAll$Variants)),]
overlapPMKB = merge(overlapPMKB,PMKBAll,by="combined")
# UPDATE DATAFRAME
clinicallySig.PMKB=as.data.frame(cbind( as.character(overlapPMKB$Sample.ID),
as.character(overlapPMKB$HUGO.symbol),
as.character(overlapPMKB$combined),
as.character(overlapPMKB$Tissue.Type.s.),
as.character(overlapPMKB$Tier),
as.character(overlapPMKB$AF_CN)),stringsAsFactors = F)
names(clinicallySig.PMKB) = c("Sample.ID", "HUGO.symbol","Gene.Variation","Tissue","PMKB.Tier","AF/CN")
clinicallySig.PMKB$ID.Variant = interaction(clinicallySig.PMKB$Sample.ID, clinicallySig.PMKB$Gene.Variation)
clinicallySig.PMKB$Source = rep("PMKB", length(clinicallySig.PMKB$ID.Variant))
# ADD TISSUE INFORMATION TO DATAFRAME
aggTissues = aggregate(Tissue~ID.Variant,data=clinicallySig.PMKB,FUN= paste)$Tissue
collapsedTissues = sapply(X = aggTissues,FUN = function(x) paste(x, collapse =  "", sep = ", "))
# REMOVE DUPLICATES
clinicallySig.PMKB = clinicallySig.PMKB[!duplicated(clinicallySig.PMKB$ID.Variant),]
clinicallySig.PMKB$Tissue = collapsedTissues
clinicallySig.PMKB$TissueSummary = rep("Breast", length(clinicallySig.PMKB$Sample.ID))
clinicallySig.PMKB$TissueSummary[grep(pattern = "reast", x = collapsedTissues,invert = T)] = "Other"
### 3. COMBINE ALL CLINICALLY SIGNIFICANT ALTERATIONS - OVERLAP
# FIND COMMON/OVERLAPPING
clinicalSig.Merged = merge(clinicallySig.PMKB,clinicallySig.OncoKB,by="ID.Variant",all = T)
detected.By.PMKB = complete.cases(clinicalSig.Merged$Source.x)
detected.By.OncoKB = complete.cases(clinicalSig.Merged$Source.y)
detected.By.Both = detected.By.PMKB == detected.By.OncoKB
# ADD ANNOATIONS
clinicalSig.Merged$Detectedby = rep("", length(detected.By.PMKB))
clinicalSig.Merged$Detectedby[which(detected.By.PMKB)] = "PMKB"
clinicalSig.Merged$Detectedby[which(detected.By.OncoKB)] = "OncoKB"
clinicalSig.Merged$Detectedby[which(detected.By.Both)] = "Both"
# IDENTIFIER
extract.gene.variant = function(x) {
splitted = stringr::str_split(string = x, pattern = "[.]")[[1]]
return (paste(splitted[2], paste(splitted[3:length(splitted)],collapse = "."), sep = "."))
}
clinicalSig.Merged$gene.variants.combined = sapply(clinicalSig.Merged$ID.Variant, FUN = extract.gene.variant)
clinicalSig.Merged$SampleID.combined = sapply(clinicalSig.Merged$ID.Variant, FUN = function(x) stringr::str_split(x, pattern="[.]")[[1]][1])
# UNIQUE
notDuplicated = !duplicated(clinicalSig.Merged$gene.variants.combined)
unique.alterations = clinicalSig.Merged$gene.variants.combined[notDuplicated]
unique.ClinicalSig.Merged = clinicalSig.Merged[notDuplicated,]
drops = c("ID.Variant","Sample.ID.x","Sample.ID.y","SampleID.combined")
unique.ClinicalSig.Merged[,!(names(unique.ClinicalSig.Merged) %in% drops)]
# ONCOKB Only
variants.Onco = unique.ClinicalSig.Merged$gene.variants.combined[unique.ClinicalSig.Merged$Detectedby != "PMKB"]
# PMKB Only
variants.PMKB = unique.ClinicalSig.Merged$gene.variants.combined[unique.ClinicalSig.Merged$Detectedby != "OncoKB"]
# SAVE AS CSV
write.csv(x = unique.ClinicalSig.Merged, file = paste0(outputFilePath, "Clinically Significant Variants - Unique.csv"))
write.csv(x = clinicalSig.Merged, file = paste0(outputFilePath, "Clinically Significant Variants - ALL.csv"))
# Chunk 8
library(VennDiagram)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn <- venn.diagram(list(PMKB=variants.PMKB, OncoKB=variants.Onco),
fill = c("#01579B", "#FF3D00"),alpha = c(0.4, 0.4), cat.cex = c(1.5,1.5), cex=c(1.1,1.1,1.1), lty = 'blank',
fontface = "bold", fontfamily = "sans",cat.fontface = "bold",
cat.default.pos = "outer",cat.pos = c(0, 10), cat.fontfamily = "sans",
ext.text=T,cat.dist = c(0.01, 0.01), filename=NULL)
venn[[5]]$label <- paste(setdiff(variants.PMKB,variants.Onco)  , collapse="\n")
venn[[6]]$label <- paste(setdiff(variants.Onco,variants.PMKB), collapse="\n")
venn[[7]]$label  <- paste(intersect(variants.PMKB, variants.Onco), collapse="\n")
grid.newpage(); grid.draw(venn) # print figure
# save figure
png(paste0(outputFilePath,"Figure 2 - PMKB vs OncoKB.png"),width = 1200,height = 1000,res = 180)
grid.draw(venn)
dev.off()
# Chunk 9
load("./input/ReadDepth.Rdata")
read_depth=as.data.frame(t(read_depth)) # row names prefix "IonXpress_" were removed to make a clear plot
names(read_depth)="depth"
read_depth$sampleID=rownames(read_depth)
min=min(read_depth$depth)
max=max(read_depth$depth)
mean_=mean(read_depth$depth)
median_=median(read_depth$depth)
sd=sqrt(var(read_depth$depth))
IQR=IQR(read_depth$depth)
stats=list(min,max,mean_,sd,IQR,median_)
stats=lapply(X = stats, FUN = function(x) as.character(round(x,0)))
t1= paste0("Coverage Statistics:")
t2= paste0("Mean = ", stats[3], ", SD = ", stats[4], ", Median = ", stats[5])
t3= paste0("IQR = ", stats[5], ", Min = ", stats[1], ", Max = ", stats[2])
read_depth = read_depth[order(read_depth$depth, decreasing = T),]
read_depth_mat=t(as.matrix(read_depth$depth))
colnames(read_depth_mat)=rownames(read_depth)
barplot(read_depth_mat, col=c("darkblue") , border="white", las=2, font.axis=2, xlab="Samples", ylab="Mean Coverage")
f = 7; text(x = 35-f, y = 10000, t1); text(x = 42.4-f, y = 9000, t2); text(x = 40.5-f, y = 8500, t3)
coverage.barplot <- recordPlot()
pdf(paste0(outputFilePath,"Supplementary Figure 1 - Mean Coverage Plot.pdf"))
print(coverage.barplot)
dev.off()
# Chunk 10
snv.before.filtering = as.data.frame(table(Mamma$Sample.ID))
snv.before.filtering = snv.before.filtering[order(snv.before.filtering$Freq, decreasing = T),]
snv.after.filtering = as.data.frame(table(mamma.final$Sample.ID))
snv.after.filtering = snv.after.filtering[order(snv.after.filtering$Freq, decreasing = T),]
combined.snv.dist = t(merge(x = snv.before.filtering, y = snv.after.filtering, by = "Var1"))
colnames(combined.snv.dist) = combined.snv.dist[1,]
combined.snv.dist = combined.snv.dist[-1,]
rownames(combined.snv.dist) = c("SNV Count Before Filtering", "SNV Count After Filtering")
rnames = rownames(combined.snv.dist)
cnames = colnames(combined.snv.dist)
combined.snv.dist = apply(combined.snv.dist, 2, as.numeric)
colnames(combined.snv.dist) = cnames
rownames(combined.snv.dist) = rnames
combined.snv.dist = as.data.frame(t(combined.snv.dist))
combined.snv.dist = as.matrix(t(combined.snv.dist[order(combined.snv.dist$`SNV Count Before Filtering`,decreasing = T),]))
colnames(combined.snv.dist) = gsub(x = colnames(combined.snv.dist), pattern = "IonXpress_", replacement = "")
barplot(combined.snv.dist, col=c("darkblue", "red") , border="white", las=2, font.axis=2, xlab="Samples", ylab="SNV Count")
legend("topright", legend = c("Before Filtering", "After Filtering"),  fill = c("darkblue", "red"))
snv.barplot <- recordPlot()
png(paste0(outputFilePath,"Supplementary Figure 3 - SNV Count Before and After Filtering.png"),width = 800,height = 500,res = 100)
print(snv.barplot)
dev.off()
# REDO CNV FILTERING AND ANNOTATE BY GENE ALTERATIONS
upperBound = 6
lowerBound = 1
cnv$copy.number = as.numeric(cnv$copy.number)
AMP=cnv[cnv$copy.number > upperBound,]
DEL=cnv[cnv$copy.number < lowerBound,]
# ANNOTATE ALTERATION TYPE
AMP$alteration = paste(AMP$gene, "Gain", sep = ".")
DEL$alteration = paste(DEL$gene, "Loss", sep = ".")
# COMBINE
cnvCombined = rbind(AMP, DEL)
cnvCombined$Sample.ID = as.character(cnvCombined$Sample.ID)
# COLOR CODES
AMP$color.translation=sapply(AMP$copy.number,FUN= function(x) { if (x > upperBound ) { return(1) }})
DEL$color.translation=sapply(DEL$copy.number,FUN= function(x) { if (x < lowerBound ) { return(1) }})
# CONVERT TO PIVOT TABLES
## TYPE 2
AMP <- dcast(AMP, alteration~Sample.ID, value.var = "color.translation",fun.aggregate = sum)
DEL <- dcast(DEL, alteration~Sample.ID, value.var = "color.translation",fun.aggregate = sum)
rownames(AMP)=AMP$alteration
rownames(DEL)=DEL$alteration
AMP=AMP[,-1,drop=FALSE]
DEL=DEL[,-1,drop=FALSE]
AMP=as.matrix(AMP)
DEL=as.matrix(DEL)
# GENERATE ONCOPRINT
leg_param = list(title = "Alternation", at = c("AMP", "DEL", "MUT"), labels = c("Amplification", "Deletion", "Mutation"))
tumor.ht.by.alterations = oncoPrint(mat.list.uni,alter_fun = alter_fun, col = col, remove_empty_columns = F,
column_title = NULL, show_column_names = T, pct_gp = gpar(fontsize=12),
row_names_gp = gpar(fontsize=12, fontface="bold"),
heatmap_legend_param = leg_param, remove_empty_rows = T)
tumor.ht.by.alterations %v% ha_column
# COMBINE SNV AND CNV
mat.list <- list(MUT=MUT, AMP=AMP, DEL=DEL)
mat.list.uni <- unify_mat_list(mat.list)
mat.list.uni$MUT = mat.list.uni$MUT[,order(colnames(mat.list.uni$MUT))]
mat.list.uni$AMP = mat.list.uni$AMP[,order(colnames(mat.list.uni$AMP))]
mat.list.uni$DEL = mat.list.uni$DEL[,order(colnames(mat.list.uni$DEL))]
# GENERATE ONCOPRINT
leg_param = list(title = "Alternation", at = c("AMP", "DEL", "MUT"), labels = c("Amplification", "Deletion", "Mutation"))
tumor.ht.by.alterations = oncoPrint(mat.list.uni,alter_fun = alter_fun, col = col, remove_empty_columns = F,
column_title = NULL, show_column_names = T, pct_gp = gpar(fontsize=12),
row_names_gp = gpar(fontsize=12, fontface="bold"),
heatmap_legend_param = leg_param, remove_empty_rows = T)
tumor.ht.by.alterations %v% ha_column
dim(mat.list.uni)
dim(mat.list.uni$MUT)
# GENERATE ONCOPRINT
leg_param = list(title = "Alternation", at = c("AMP", "DEL", "MUT"), labels = c("Amplification", "Deletion", "Mutation"))
tumor.ht.by.alterations = oncoPrint(mat.list.uni,alter_fun = alter_fun, col = col, remove_empty_columns = F,
column_title = NULL, show_column_names = T, pct_gp = gpar(fontsize=12),
row_names_gp = gpar(fontsize=12, fontface="bold"),
heatmap_legend_param = leg_param, remove_empty_rows = T)
tumor.ht.by.alterations %v% ha_column
# REDO CNV FILTERING AND ANNOTATE BY GENE ALTERATIONS
upperBound = 6
lowerBound = 1
cnv$copy.number = as.numeric(cnv$copy.number)
AMP=cnv[cnv$copy.number > upperBound,]
DEL=cnv[cnv$copy.number < lowerBound,]
# ANNOTATE ALTERATION TYPE
AMP$alteration = paste(AMP$gene, "Gain", sep = ".")
DEL$alteration = paste(DEL$gene, "Loss", sep = ".")
# COMBINE
cnvCombined = rbind(AMP, DEL)
cnvCombined$Sample.ID = as.character(cnvCombined$Sample.ID)
# COLOR CODES
AMP$color.translation=sapply(AMP$copy.number,FUN= function(x) { if (x > upperBound ) { return(1) }})
DEL$color.translation=sapply(DEL$copy.number,FUN= function(x) { if (x < lowerBound ) { return(1) }})
# CONVERT TO PIVOT TABLES
## TYPE 2
AMP <- dcast(AMP, alteration~Sample.ID, value.var = "color.translation",fun.aggregate = sum)
DEL <- dcast(DEL, alteration~Sample.ID, value.var = "color.translation",fun.aggregate = sum)
rownames(AMP)=AMP$alteration
rownames(DEL)=DEL$alteration
AMP=AMP[,-1,drop=FALSE]
DEL=DEL[,-1,drop=FALSE]
AMP=as.matrix(AMP)
DEL=as.matrix(DEL)
AMP
DEL
# REMAKE SNV MATRIX - USING ALTERATIONS
mamma.final$Gene_ProteinChange=interaction(mamma.final$HUGO.symbol,mamma.final$Protein.sequence.change, sep = " ")
MUT=mamma.final[, c("Sample.ID", "Gene_ProteinChange", "Sequence.ontology")]
MS=as.numeric(gsub("MS|CS|FI|ID|SS|SG|FD|II","1",MUT$Sequence.ontology))
MUT$Sequence.ontology=MS
MUT$Gene_ProteinChange <- factor(MUT$Gene_ProteinChange)
MUT=dcast(MUT, Gene_ProteinChange~Sample.ID, value.var = "Sequence.ontology",fun.aggregate = sum)
rownames(MUT)=MUT[,1]
MUT=MUT[,-1]
MUT=as.matrix(MUT)
curr=colnames(MUT)
all=sort(unique(Mamma$Sample.ID))
removed=all[!(all %in% curr)]
len=length(removed)
mat=matrix(rep(MUT[,1]*0,len), nrow = nrow(MUT), ncol = len)
colnames(mat)=as.character(removed)
rownames(mat)=rownames(MUT)
MUT=cbind2(MUT, mat)
MUT = MUT[,order(colnames(MUT))]
# REMAKE SNV MATRIX - USING ALTERATIONS
mamma.final$Gene_ProteinChange=interaction(mamma.final$HUGO.symbol,mamma.final$Protein.sequence.change, sep = " ")
MUT=mamma.final[, c("Sample.ID", "Gene_ProteinChange", "Sequence.ontology")]
MS=as.numeric(gsub("MS|CS|FI|ID|SS|SG|FD|II","1",MUT$Sequence.ontology))
MUT$Sequence.ontology=MS
MUT$Gene_ProteinChange <- factor(MUT$Gene_ProteinChange)
MUT=dcast(MUT, Gene_ProteinChange~Sample.ID, value.var = "Sequence.ontology",fun.aggregate = sum)
rownames(MUT)=MUT[,1]
MUT=MUT[,-1]
MUT=as.matrix(MUT)
curr=colnames(MUT)
all=sort(unique(Mamma$Sample.ID))
removed=all[!(all %in% curr)]
len=length(removed)
mat=matrix(rep(MUT[,1]*0,len), nrow = nrow(MUT), ncol = len)
colnames(mat)=as.character(removed)
rownames(mat)=rownames(MUT)
MUT=cbind2(MUT, mat)
MUT = MUT[,order(colnames(MUT))]
# REMAKE CNV MATRIX - USING ALTERATIONS
upperBound = 6
lowerBound = 1
cnv$copy.number = as.numeric(cnv$copy.number)
AMP=cnv[cnv$copy.number > upperBound,]
DEL=cnv[cnv$copy.number < lowerBound,]
# ANNOTATE ALTERATION TYPE
AMP$alteration = paste(AMP$gene, "Gain", sep = ".")
DEL$alteration = paste(DEL$gene, "Loss", sep = ".")
# COMBINE
cnvCombined = rbind(AMP, DEL)
cnvCombined$Sample.ID = as.character(cnvCombined$Sample.ID)
# COLOR CODES
AMP$color.translation=sapply(AMP$copy.number,FUN= function(x) { if (x > upperBound ) { return(1) }})
DEL$color.translation=sapply(DEL$copy.number,FUN= function(x) { if (x < lowerBound ) { return(1) }})
# CONVERT TO PIVOT TABLES
## TYPE 2
AMP <- dcast(AMP, alteration~Sample.ID, value.var = "color.translation",fun.aggregate = sum)
DEL <- dcast(DEL, alteration~Sample.ID, value.var = "color.translation",fun.aggregate = sum)
rownames(AMP)=AMP$alteration
rownames(DEL)=DEL$alteration
AMP=AMP[,-1,drop=FALSE]
DEL=DEL[,-1,drop=FALSE]
AMP=as.matrix(AMP)
DEL=as.matrix(DEL)
# COMBINE SNV AND CNV
mat.list <- list(MUT=MUT, AMP=AMP, DEL=DEL)
mat.list.uni <- unify_mat_list(mat.list)
mat.list.uni$MUT = mat.list.uni$MUT[,order(colnames(mat.list.uni$MUT))]
mat.list.uni$AMP = mat.list.uni$AMP[,order(colnames(mat.list.uni$AMP))]
mat.list.uni$DEL = mat.list.uni$DEL[,order(colnames(mat.list.uni$DEL))]
# SIMPLIFY THE SAMPLES NAMES
colnames(mat.list.uni$MUT)=gsub(pattern = "IonXpress_", replacement = "",x = colnames(mat.list.uni$MUT))
colnames(mat.list.uni$AMP)=gsub(pattern = "IonXpress_", replacement = "",x = colnames(mat.list.uni$AMP))
colnames(mat.list.uni$DEL)=gsub(pattern = "IonXpress_", replacement = "",x = colnames(mat.list.uni$DEL))
# GENERATE ONCOPRINT
leg_param = list(title = "Alternation", at = c("AMP", "DEL", "MUT"), labels = c("Amplification", "Deletion", "Mutation"))
tumor.ht.by.alterations = oncoPrint(mat.list.uni,alter_fun = alter_fun, col = col, remove_empty_columns = F,
column_title = NULL, show_column_names = T, pct_gp = gpar(fontsize=12),
row_names_gp = gpar(fontsize=12, fontface="bold"),
heatmap_legend_param = leg_param, remove_empty_rows = T)
tumor.ht.by.alterations %v% ha_column
png(paste0(outputFilePath,"Supplementary Figure 4 - Oncoprint of Unique Alterations"), width = 10, height = 10, units = 'in', res = 300)
tumor.ht.by.alterations %v% ha_column
dev.off()
png(paste0(outputFilePath,"Supplementary Figure 4 - Oncoprint of Unique Alterations.png"), width = 10, height = 10, units = 'in', res = 300)
tumor.ht.by.alterations %v% ha_column
dev.off()
png(paste0(outputFilePath,"Supplementary Figure 4 - Oncoprint of Unique Alterations.png"), width = 10, height = 12, units = 'in', res = 300)
tumor.ht.by.alterations %v% ha_column
dev.off()
library(VennDiagram)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn <- venn.diagram(list(PMKB=variants.PMKB, OncoKB=variants.Onco),
fill = c("#01579B", "#FF3D00"),alpha = c(0.4, 0.4), cat.cex = c(1.5,1.5), cex=c(1.1,1.1,1.1), lty = 'blank',
fontface = "bold", fontfamily = "sans",cat.fontface = "bold",
cat.default.pos = "outer",cat.pos = c(0, 10), cat.fontfamily = "sans",
ext.text=T,cat.dist = c(0.01, 0.01), filename=NULL)
venn[[5]]$label <- paste(setdiff(variants.PMKB,variants.Onco)  , collapse="\n")
venn[[6]]$label <- paste(setdiff(variants.Onco,variants.PMKB), collapse="\n")
venn[[7]]$label  <- paste(intersect(variants.PMKB, variants.Onco), collapse="\n")
grid.newpage(); grid.draw(venn) # print figure
# save figure
png(paste0(outputFilePath,"Figure 2 - PMKB vs OncoKB.png"),width = 1200,height = 1000,res = 180)
grid.draw(venn)
dev.off()
library(VennDiagram)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn <- venn.diagram(list(PMKB=variants.PMKB, OncoKB=variants.Onco),
fill = c("#01579B", "#FF3D00"),alpha = c(0.4, 0.4), cat.cex = c(1.5,1.5), cex=c(1.1,1.1,1.1), lty = 'blank',
fontface = "bold", fontfamily = "sans",cat.fontface = "bold",
cat.default.pos = "outer",cat.pos = c(0, 10), cat.fontfamily = "sans",
ext.text=T,cat.dist = c(0.01, 0.01), filename=NULL)
venn[[5]]$label <- paste(setdiff(variants.PMKB,variants.Onco)  , collapse="\n")
venn[[6]]$label <- paste(setdiff(variants.Onco,variants.PMKB), collapse="\n")
venn[[7]]$label  <- paste(intersect(variants.PMKB, variants.Onco), collapse="\n")
grid.newpage(); grid.draw(venn) # print figure
# save figure
png(paste0(outputFilePath,"Figure 2 - PMKB vs OncoKB.png"),width = 1200,height = 1000,res = 180)
grid.draw(venn)
dev.off()
library(VennDiagram)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn <- venn.diagram(list(PMKB=variants.PMKB, OncoKB=variants.Onco),
fill = c("#01579B", "#FF3D00"),alpha = c(0.4, 0.4), cat.cex = c(1.5,1.5), cex=c(1.1,1.1,1.1), lty = 'blank',
fontface = "bold", fontfamily = "sans",cat.fontface = "bold",
cat.default.pos = "outer",cat.pos = c(0, 10), cat.fontfamily = "sans",
ext.text=T,cat.dist = c(0.01, 0.01), filename=NULL)
venn[[5]]$label <- paste(setdiff(variants.PMKB,variants.Onco)  , collapse="\n")
venn[[6]]$label <- paste(setdiff(variants.Onco,variants.PMKB), collapse="\n")
venn[[7]]$label  <- paste(intersect(variants.PMKB, variants.Onco), collapse="\n")
grid.newpage(); grid.draw(venn) # print figure
# save figure
png(paste0(outputFilePath,"Figure 2 - PMKB vs OncoKB.png"),width = 1200,height = 1000,res = 180)
grid.draw(venn)
dev.off()
library(VennDiagram)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn <- venn.diagram(list(PMKB=variants.PMKB, OncoKB=variants.Onco),
fill = c("#01579B", "#FF3D00"),alpha = c(0.4, 0.4), cat.cex = c(1.5,1.5), cex=c(1.1,1.1,1.1), lty = 'blank',
fontface = "bold", fontfamily = "sans",cat.fontface = "bold",
cat.default.pos = "outer",cat.pos = c(0, 10), cat.fontfamily = "sans",
ext.text=T,cat.dist = c(0.01, 0.01), filename=NULL)
venn[[5]]$label <- paste(setdiff(variants.PMKB,variants.Onco)  , collapse="\n")
venn[[6]]$label <- paste(setdiff(variants.Onco,variants.PMKB), collapse="\n")
venn[[7]]$label  <- paste(intersect(variants.PMKB, variants.Onco), collapse="\n")
grid.newpage(); grid.draw(venn) # print figure
# save figure
png(paste0(outputFilePath,"Figure 2 - PMKB vs OncoKB.png"),width = 1200,height = 1000,res = 180)
grid.draw(venn)
dev.off()
library(VennDiagram)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn <- venn.diagram(list(PMKB=variants.PMKB, OncoKB=variants.Onco),
fill = c("#01579B", "#FF3D00"),alpha = c(0.4, 0.4), cat.cex = c(1.5,1.5), cex=c(1.1,1.1,1.1), lty = 'blank',
fontface = "bold", fontfamily = "sans",cat.fontface = "bold",
cat.default.pos = "outer",cat.pos = c(0, 10), cat.fontfamily = "sans",
ext.text=T,cat.dist = c(0.01, 0.01), filename=NULL)
venn[[5]]$label <- paste(setdiff(variants.PMKB,variants.Onco)  , collapse="\n")
venn[[6]]$label <- paste(setdiff(variants.Onco,variants.PMKB), collapse="\n")
venn[[7]]$label  <- paste(intersect(variants.PMKB, variants.Onco), collapse="\n")
grid.newpage(); grid.draw(venn) # print figure
# save figure
png(paste0(outputFilePath,"Figure 2 - PMKB vs OncoKB.png"),width = 1200,height = 1000,res = 180)
grid.draw(venn)
dev.off()
library(VennDiagram)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn <- venn.diagram(list(PMKB=variants.PMKB, OncoKB=variants.Onco),
fill = c("#01579B", "#FF3D00"),alpha = c(0.4, 0.4), cat.cex = c(1.5,1.5), cex=c(1.1,1.1,1.1), lty = 'blank',
fontface = "bold", fontfamily = "sans",cat.fontface = "bold",
cat.default.pos = "outer",cat.pos = c(0, 10), cat.fontfamily = "sans",
ext.text=T,cat.dist = c(0.01, 0.01), filename=NULL)
venn[[5]]$label <- paste(setdiff(variants.PMKB,variants.Onco)  , collapse="\n")
venn[[6]]$label <- paste(setdiff(variants.Onco,variants.PMKB), collapse="\n")
venn[[7]]$label  <- paste(intersect(variants.PMKB, variants.Onco), collapse="\n")
grid.newpage(); grid.draw(venn) # print figure
# save figure
png(paste0(outputFilePath,"Figure 2 - PMKB vs OncoKB.png"),width = 1200,height = 1000,res = 180)
grid.draw(venn)
dev.off()
library(VennDiagram)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn <- venn.diagram(list(PMKB=variants.PMKB, OncoKB=variants.Onco),
fill = c("#01579B", "#FF3D00"),alpha = c(0.4, 0.4), cat.cex = c(1.5,1.5), cex=c(1.1,1.1,1.1), lty = 'blank',
fontface = "bold", fontfamily = "sans",cat.fontface = "bold",
cat.default.pos = "outer",cat.pos = c(0, 10), cat.fontfamily = "sans",
ext.text=T,cat.dist = c(0.01, 0.01), filename=NULL)
venn[[5]]$label <- paste(setdiff(variants.PMKB,variants.Onco)  , collapse="\n")
venn[[6]]$label <- paste(setdiff(variants.Onco,variants.PMKB), collapse="\n")
venn[[7]]$label  <- paste(intersect(variants.PMKB, variants.Onco), collapse="\n")
grid.newpage(); grid.draw(venn) # print figure
# save figure
png(paste0(outputFilePath,"Figure 2 - PMKB vs OncoKB.png"),width = 1200,height = 1000,res = 180)
grid.draw(venn)
dev.off()
library(VennDiagram)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn <- venn.diagram(list(PMKB=variants.PMKB, OncoKB=variants.Onco),
fill = c("#01579B", "#FF3D00"),alpha = c(0.4, 0.4), cat.cex = c(1.5,1.5), cex=c(1.1,1.1,1.1), lty = 'blank',
fontface = "bold", fontfamily = "sans",cat.fontface = "bold",
cat.default.pos = "outer",cat.pos = c(0, 10), cat.fontfamily = "sans",
ext.text=T,cat.dist = c(0.01, 0.01), filename=NULL)
venn[[5]]$label <- paste(setdiff(variants.PMKB,variants.Onco)  , collapse="\n")
venn[[6]]$label <- paste(setdiff(variants.Onco,variants.PMKB), collapse="\n")
venn[[7]]$label  <- paste(intersect(variants.PMKB, variants.Onco), collapse="\n")
grid.newpage(); grid.draw(venn) # print figure
# save figure
png(paste0(outputFilePath,"Figure 2 - PMKB vs OncoKB.png"),width = 1200,height = 1000,res = 180)
grid.draw(venn)
dev.off()
library(VennDiagram)
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
venn <- venn.diagram(list(PMKB=variants.PMKB, OncoKB=variants.Onco),
fill = c("#01579B", "#FF3D00"),alpha = c(0.4, 0.4), cat.cex = c(1.5,1.5), cex=c(1.1,1.1,1.1), lty = 'blank',
fontface = "bold", fontfamily = "sans",cat.fontface = "bold",
cat.default.pos = "outer",cat.pos = c(0, 10), cat.fontfamily = "sans",
ext.text=T,cat.dist = c(0.01, 0.01), filename=NULL)
venn[[5]]$label <- paste(setdiff(variants.PMKB,variants.Onco)  , collapse="\n")
venn[[6]]$label <- paste(setdiff(variants.Onco,variants.PMKB), collapse="\n")
venn[[7]]$label  <- paste(intersect(variants.PMKB, variants.Onco), collapse="\n")
grid.newpage(); grid.draw(venn) # print figure
# save figure
png(paste0(outputFilePath,"Figure 2 - PMKB vs OncoKB.png"),width = 1200,height = 1000,res = 180)
grid.draw(venn)
dev.off()
sessionInfo()
# REMAKE SNV MATRIX - USING ALTERATIONS
mamma.final$Gene_ProteinChange=interaction(mamma.final$HUGO.symbol,mamma.final$Protein.sequence.change, sep = " ")
MUT=mamma.final[, c("Sample.ID", "Gene_ProteinChange", "Sequence.ontology")]
MS=as.numeric(gsub("MS|CS|FI|ID|SS|SG|FD|II","1",MUT$Sequence.ontology))
MUT$Sequence.ontology=MS
MUT$Gene_ProteinChange <- factor(MUT$Gene_ProteinChange)
MUT=dcast(MUT, Gene_ProteinChange~Sample.ID, value.var = "Sequence.ontology",fun.aggregate = sum)
rownames(MUT)=MUT[,1]
MUT=MUT[,-1]
MUT=as.matrix(MUT)
curr=colnames(MUT)
all=sort(unique(Mamma$Sample.ID))
removed=all[!(all %in% curr)]
len=length(removed)
mat=matrix(rep(MUT[,1]*0,len), nrow = nrow(MUT), ncol = len)
colnames(mat)=as.character(removed)
rownames(mat)=rownames(MUT)
MUT=cbind2(MUT, mat)
MUT = MUT[,order(colnames(MUT))]
# REMAKE CNV MATRIX - USING ALTERATIONS
upperBound = 6
lowerBound = 1
cnv$copy.number = as.numeric(cnv$copy.number)
AMP=cnv[cnv$copy.number > upperBound,]
DEL=cnv[cnv$copy.number < lowerBound,]
# ANNOTATE ALTERATION TYPE
AMP$alteration = paste(AMP$gene, "Gain", sep = ".")
DEL$alteration = paste(DEL$gene, "Loss", sep = ".")
# COMBINE
cnvCombined = rbind(AMP, DEL)
cnvCombined$Sample.ID = as.character(cnvCombined$Sample.ID)
# COLOR CODES
AMP$color.translation=sapply(AMP$copy.number,FUN= function(x) { if (x > upperBound ) { return(1) }})
DEL$color.translation=sapply(DEL$copy.number,FUN= function(x) { if (x < lowerBound ) { return(1) }})
# CONVERT TO PIVOT TABLES
## TYPE 2
AMP <- dcast(AMP, alteration~Sample.ID, value.var = "color.translation",fun.aggregate = sum)
DEL <- dcast(DEL, alteration~Sample.ID, value.var = "color.translation",fun.aggregate = sum)
rownames(AMP)=AMP$alteration
rownames(DEL)=DEL$alteration
AMP=AMP[,-1,drop=FALSE]
DEL=DEL[,-1,drop=FALSE]
AMP=as.matrix(AMP)
DEL=as.matrix(DEL)
# ONCOPRINT
# MAKE SURE TO RUN FIGURE 1 - ONCOPRINT BEFORE RUNNING BELOW
# COMBINE SNV AND CNV
mat.list <- list(MUT=MUT, AMP=AMP, DEL=DEL)
mat.list.uni <- unify_mat_list(mat.list)
mat.list.uni$MUT = mat.list.uni$MUT[,order(colnames(mat.list.uni$MUT))]
mat.list.uni$AMP = mat.list.uni$AMP[,order(colnames(mat.list.uni$AMP))]
mat.list.uni$DEL = mat.list.uni$DEL[,order(colnames(mat.list.uni$DEL))]
# SIMPLIFY THE SAMPLES NAMES
colnames(mat.list.uni$MUT)=gsub(pattern = "IonXpress_", replacement = "",x = colnames(mat.list.uni$MUT))
colnames(mat.list.uni$AMP)=gsub(pattern = "IonXpress_", replacement = "",x = colnames(mat.list.uni$AMP))
colnames(mat.list.uni$DEL)=gsub(pattern = "IonXpress_", replacement = "",x = colnames(mat.list.uni$DEL))
# GENERATE ONCOPRINT
leg_param = list(title = "Alternation", at = c("AMP", "DEL", "MUT"), labels = c("Amplification", "Deletion", "Mutation"))
tumor.ht.by.alterations = oncoPrint(mat.list.uni,alter_fun = alter_fun, col = col, remove_empty_columns = F,
column_title = NULL, show_column_names = T, pct_gp = gpar(fontsize=12),
row_names_gp = gpar(fontsize=12, fontface="bold"),
heatmap_legend_param = leg_param, remove_empty_rows = T)
tumor.ht.by.alterations %v% ha_column
# save
png(paste0(outputFilePath,"Supplementary Figure 4 - Oncoprint of Unique Alterations.png"), width = 10, height = 12, units = 'in', res = 300)
tumor.ht.by.alterations %v% ha_column
dev.off()
sort(rowSums(MUT),decreasing = T) # MOST COMMON ALTERATIONS
# WORKING DIRECTORY TO LOCATION OF SCRIPT - MUST HAVE INPUT AND OUT FOLDER (MIRROR FROM )
setwd("./")
# SET INPUT AND OUTPUT PATHS
inputFilePath = "./input/"
outputFilePath = "./out/"
# LOAD PACKAGES
library(reshape2)
# LOAD DATA
load(paste0(inputFilePath, "CRAVAT.annotated.SNVs.rda")) # CRAVAT ANNOTATED SNV DATA
load(paste0(inputFilePath, "clinical.data.final.rda")) # CLINICAL DATA
load(paste0(inputFilePath, "oncokb.Rdata")) # ONCOKB DB
load(paste0(inputFilePath, "cnv.data.rda")) # CNV DATA
load(paste0(inputFilePath, "PMKB.rda")) # PMKB DB
load(paste0(inputFilePath, "colorPalette.rda")) # ANNOTATION COLORS
